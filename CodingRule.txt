・コミットに関して

	・タイトルには日付、変更に関する詳細を日本語で「丁寧」に書いてください。
	　以下を参考にしてください。

	　タイトル	: 2015/03/19 プレイヤの移動処理を実装。
	　内容		: タイトルで解決している場合は、特に明記しなくても構いません。

	　タイトル	: 2015/03/19 プレイヤの移動を変更。
	　内容		: 移動の方式を直打ちからアクションに変更しました。

	・とにかく細かくコミットしてください。
	　一つの動作に一コミットが望ましいです。多数のクラスを変更して、一気にコミットするのはやめてください。

・ソースについて

	・命名規則について

		・変数名は初めにmを付け、以降単語ごとに大文字にしてください。
		　例 : mTextureName, mPosition, mIsDead

		・関数名、引数名、ローカル変数名は初めが小文字で、以降単語ごとに大文字にしてください。
		　引数とメンバの名前が同じ場合はthisを使用してください。
		　例 : update, init, removeData

		・変数名はわかりやすく、省略しないようにしてください。
		　ローカル変数の場合は省略しても構いません。
		　例 : stageCreator, filePath, testFactory ローカル : sc, path, testFacなどはOKにします。

	・長くなりがちな形名はtypedefを使用してください。
	　例 : std::map< std::string, Node* >をtypedef std::map< std::string, Node* > NodeContainerなど。

	・変数の初期化は必ず行ってください。

	・autoを使用するのは自由ですが、基本型くらいは書いてください。 autoに何が入るのかも把握してください。

	・マジックナンバーを使わないようにしてください。
	　例 : for ( int i = 0; i < 5; ++i )などの数値はconstで定義する、配列などの場合はsizeを取得するなどしてください。

	・ループ文の中で参照するのは禁止です。
	　例 : for ( int i = 0; i < hoge.getSize(); ++i )などの場合、const int size = hoge.getSize()のようにループ前に宣言してください。

	・char型は極力使用せず、std::stringを使用してください。

	・引数で参照オブジェクトを引き受ける場合、基本的にconstを付けてください。
	　例 : void hoge( Vec2& v )をvoid hoge( const Vec2& v )など。

	・overrideする関数は明示的にoverrideキーワードを付けてください。

	・enumを使用する場合、全て大文字で列挙してください。
	　例 : enum Test{ TEST_NODE = 0, TEST_SPRITE, TEST_MASK };

	・使用しないインクルードは消去してください。

	・戻り値が固定の場合constを付けてください。
	　例 : bool isDead() const;

	・v2.xの非推奨な関数を使用するのは避けましょう。

	・newしたらdelete, retainしたらreleaseを必ずしてください。

	・エンコードはUTF-8を使用してください。

	・その場しのぎを続けると必ず崩壊します。

	・Cocos2d-xのクラスを継承している場合、コンストラクタ、デストラクタをprotectedにしてください。

	・メンバ変数をバラバラに置くのはやめてください。一番上にメンバ変数、何個か関数を挟んでメンバ変数など。

	・コメントを書くならフォーマットを統一してください。

・リソースについて

	・各自フォルダを分けてわかりやすいようにしてください。

	・フォルダ名、ファイル名は始めが大文字で以降単語ごとに大文字にしてください。
	　例 : EndingBG, ResultLogo